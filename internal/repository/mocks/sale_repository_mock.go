// Code generated by MockGen. DO NOT EDIT.
// Source: sale_repository.go
//
// Generated by this command:
//
//	mockgen -source=sale_repository.go -destination=./mocks/sale_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/NicolasNSC/showcase-service-fiap/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockSaleRepository is a mock of SaleRepository interface.
type MockSaleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSaleRepositoryMockRecorder
	isgomock struct{}
}

// MockSaleRepositoryMockRecorder is the mock recorder for MockSaleRepository.
type MockSaleRepositoryMockRecorder struct {
	mock *MockSaleRepository
}

// NewMockSaleRepository creates a new mock instance.
func NewMockSaleRepository(ctrl *gomock.Controller) *MockSaleRepository {
	mock := &MockSaleRepository{ctrl: ctrl}
	mock.recorder = &MockSaleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSaleRepository) EXPECT() *MockSaleRepositoryMockRecorder {
	return m.recorder
}

// GetAvailableByPrice mocks base method.
func (m *MockSaleRepository) GetAvailableByPrice(ctx context.Context) ([]*domain.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableByPrice", ctx)
	ret0, _ := ret[0].([]*domain.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableByPrice indicates an expected call of GetAvailableByPrice.
func (mr *MockSaleRepositoryMockRecorder) GetAvailableByPrice(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableByPrice", reflect.TypeOf((*MockSaleRepository)(nil).GetAvailableByPrice), ctx)
}

// GetByID mocks base method.
func (m *MockSaleRepository) GetByID(ctx context.Context, id string) (*domain.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*domain.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockSaleRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockSaleRepository)(nil).GetByID), ctx, id)
}

// GetByPaymentID mocks base method.
func (m *MockSaleRepository) GetByPaymentID(ctx context.Context, paymentID string) (*domain.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPaymentID", ctx, paymentID)
	ret0, _ := ret[0].(*domain.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPaymentID indicates an expected call of GetByPaymentID.
func (mr *MockSaleRepositoryMockRecorder) GetByPaymentID(ctx, paymentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPaymentID", reflect.TypeOf((*MockSaleRepository)(nil).GetByPaymentID), ctx, paymentID)
}

// GetByVehicleID mocks base method.
func (m *MockSaleRepository) GetByVehicleID(ctx context.Context, vehicleID string) (*domain.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByVehicleID", ctx, vehicleID)
	ret0, _ := ret[0].(*domain.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByVehicleID indicates an expected call of GetByVehicleID.
func (mr *MockSaleRepositoryMockRecorder) GetByVehicleID(ctx, vehicleID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByVehicleID", reflect.TypeOf((*MockSaleRepository)(nil).GetByVehicleID), ctx, vehicleID)
}

// GetSoldByPrice mocks base method.
func (m *MockSaleRepository) GetSoldByPrice(ctx context.Context) ([]*domain.Sale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSoldByPrice", ctx)
	ret0, _ := ret[0].([]*domain.Sale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSoldByPrice indicates an expected call of GetSoldByPrice.
func (mr *MockSaleRepositoryMockRecorder) GetSoldByPrice(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSoldByPrice", reflect.TypeOf((*MockSaleRepository)(nil).GetSoldByPrice), ctx)
}

// Save mocks base method.
func (m *MockSaleRepository) Save(ctx context.Context, sale *domain.Sale) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, sale)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSaleRepositoryMockRecorder) Save(ctx, sale any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSaleRepository)(nil).Save), ctx, sale)
}

// Update mocks base method.
func (m *MockSaleRepository) Update(ctx context.Context, sale *domain.Sale) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, sale)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSaleRepositoryMockRecorder) Update(ctx, sale any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSaleRepository)(nil).Update), ctx, sale)
}
