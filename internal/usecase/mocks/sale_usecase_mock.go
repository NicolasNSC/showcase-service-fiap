// Code generated by MockGen. DO NOT EDIT.
// Source: sale_usecase.go
//
// Generated by this command:
//
//	mockgen -source=sale_usecase.go -destination=./mocks/sale_usecase_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/NicolasNSC/showcase-service-fiap/internal/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockSaleUseCaseInterface is a mock of SaleUseCaseInterface interface.
type MockSaleUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSaleUseCaseInterfaceMockRecorder
	isgomock struct{}
}

// MockSaleUseCaseInterfaceMockRecorder is the mock recorder for MockSaleUseCaseInterface.
type MockSaleUseCaseInterfaceMockRecorder struct {
	mock *MockSaleUseCaseInterface
}

// NewMockSaleUseCaseInterface creates a new mock instance.
func NewMockSaleUseCaseInterface(ctrl *gomock.Controller) *MockSaleUseCaseInterface {
	mock := &MockSaleUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockSaleUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSaleUseCaseInterface) EXPECT() *MockSaleUseCaseInterfaceMockRecorder {
	return m.recorder
}

// CreateListing mocks base method.
func (m *MockSaleUseCaseInterface) CreateListing(ctx context.Context, input *dto.InputCreateListingDTO) (*dto.OutputCreateListingDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateListing", ctx, input)
	ret0, _ := ret[0].(*dto.OutputCreateListingDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateListing indicates an expected call of CreateListing.
func (mr *MockSaleUseCaseInterfaceMockRecorder) CreateListing(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateListing", reflect.TypeOf((*MockSaleUseCaseInterface)(nil).CreateListing), ctx, input)
}

// HandlePaymentWebhook mocks base method.
func (m *MockSaleUseCaseInterface) HandlePaymentWebhook(ctx context.Context, input *dto.InputWebhookDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlePaymentWebhook", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandlePaymentWebhook indicates an expected call of HandlePaymentWebhook.
func (mr *MockSaleUseCaseInterfaceMockRecorder) HandlePaymentWebhook(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePaymentWebhook", reflect.TypeOf((*MockSaleUseCaseInterface)(nil).HandlePaymentWebhook), ctx, input)
}

// ListAvailable mocks base method.
func (m *MockSaleUseCaseInterface) ListAvailable(ctx context.Context) ([]*dto.OutputSaleItemDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailable", ctx)
	ret0, _ := ret[0].([]*dto.OutputSaleItemDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailable indicates an expected call of ListAvailable.
func (mr *MockSaleUseCaseInterfaceMockRecorder) ListAvailable(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailable", reflect.TypeOf((*MockSaleUseCaseInterface)(nil).ListAvailable), ctx)
}

// ListSold mocks base method.
func (m *MockSaleUseCaseInterface) ListSold(ctx context.Context) ([]*dto.OutputSaleItemDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSold", ctx)
	ret0, _ := ret[0].([]*dto.OutputSaleItemDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSold indicates an expected call of ListSold.
func (mr *MockSaleUseCaseInterfaceMockRecorder) ListSold(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSold", reflect.TypeOf((*MockSaleUseCaseInterface)(nil).ListSold), ctx)
}

// Purchase mocks base method.
func (m *MockSaleUseCaseInterface) Purchase(ctx context.Context, saleID string, input dto.InputPurchaseDTO) (*dto.OutputPurchaseDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Purchase", ctx, saleID, input)
	ret0, _ := ret[0].(*dto.OutputPurchaseDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Purchase indicates an expected call of Purchase.
func (mr *MockSaleUseCaseInterfaceMockRecorder) Purchase(ctx, saleID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Purchase", reflect.TypeOf((*MockSaleUseCaseInterface)(nil).Purchase), ctx, saleID, input)
}

// UpdateListing mocks base method.
func (m *MockSaleUseCaseInterface) UpdateListing(ctx context.Context, vehicleID string, input *dto.InputUpdateListingDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateListing", ctx, vehicleID, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateListing indicates an expected call of UpdateListing.
func (mr *MockSaleUseCaseInterfaceMockRecorder) UpdateListing(ctx, vehicleID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateListing", reflect.TypeOf((*MockSaleUseCaseInterface)(nil).UpdateListing), ctx, vehicleID, input)
}
